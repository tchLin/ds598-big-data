{
	"name": "Weather Dataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "weather_historical_bronze",
						"type": "DatasetReference"
					},
					"name": "weatherData",
					"description": "Bronze weather data"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "weather_silver_data",
						"type": "DatasetReference"
					},
					"name": "WeatherSink",
					"rejectedDataLinkedService": {
						"referenceName": "ds598_datalake",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "ConvertTime",
					"description": "Convert timestamp format"
				},
				{
					"name": "FilterInvalidRows"
				},
				{
					"name": "AddLocation",
					"description": "Add Boston as location"
				},
				{
					"name": "ConvertTimestamp",
					"description": "Conver timestamp to datetime"
				},
				{
					"name": "AddNewID",
					"description": "Create a unique ID by concatenating location and corrected_timestamp"
				},
				{
					"name": "TempDerive",
					"description": "Derive multiple temperature values"
				},
				{
					"name": "FixateCoordinates",
					"description": "Assign fixed longitude and latitude values"
				},
				{
					"name": "WeatherDataDerive",
					"description": "Extract and convert the weather ID from a string to an integer.\n\nExtract specific weather details from strings."
				},
				{
					"name": "FilterColumns",
					"description": "Rename the temperature columns and\ndrop unnecessary columns:"
				},
				{
					"name": "FlattenData",
					"description": "Unrolling arrays from  to  with columns 'city_id, cod, cnt, message, calctime, clouds_all, timestamp, feels_like, humidity, pressure, temp, temp_max, temp_min, weather_description, weather_icon, weather_id, weather_main, wind_deg, wind_gust, wind_speed'"
				}
			],
			"scriptLines": [
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine',",
				"     wildcardPaths:['*']) ~> weatherData",
				"FlattenData derive(corrected_timestamp = iif(length(toString(timestamp)) > 10, toInteger(null()), timestamp)) ~> ConvertTime",
				"AddLocation filter(isNull(temp) || isNull(humidity) || isNull(timestamp)) ~> FilterInvalidRows",
				"ConvertTime derive(location = \"Boston\") ~> AddLocation",
				"FilterInvalidRows derive(date_time = toTimestamp(toLong(corrected_timestamp) * 1000)) ~> ConvertTimestamp",
				"ConvertTimestamp derive(id = concat(location, '_', toString(corrected_timestamp))) ~> AddNewID",
				"AddNewID derive(temp = round(temp - 273.15, 0),",
				"          temp_min_c = round(temp_min - 273.15, 0),",
				"          temp_max_c = round(temp_max - 273.15, 0),",
				"          feels_like_c = round(feels_like - 273.15, 0)) ~> TempDerive",
				"TempDerive derive(lon = -71.0589,",
				"          lat = 42.3601) ~> FixateCoordinates",
				"FixateCoordinates derive(weather_id_value = toString(weather_id[1]),",
				"          weather_main_value = weather_main,",
				"          weather_description_value = weather_description,",
				"          weather_icon_value = weather_icon) ~> WeatherDataDerive",
				"WeatherDataDerive select(mapColumn(",
				"          clouds_all,",
				"          feels_like_k = feels_like,",
				"          humidity,",
				"          pressure,",
				"          temp_k = temp,",
				"          temp_max_k = temp_max,",
				"          temp_min_k = temp_min,",
				"          wind_deg,",
				"          wind_gust,",
				"          wind_speed,",
				"          corrected_timestamp,",
				"          location,",
				"          date_time,",
				"          id,",
				"          temp_min_c,",
				"          temp_max_c,",
				"          feels_like_c,",
				"          lon,",
				"          lat,",
				"          weather_id_value,",
				"          weather_main_value",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> FilterColumns",
				"weatherData foldDown(unroll(list),",
				"     mapColumn(",
				"          city_id,",
				"          cod,",
				"          message,",
				"          calctime,",
				"          cnt,",
				"          clouds_all = list.clouds.all,",
				"          timestamp = list.dt,",
				"          feels_like = list.main.feels_like,",
				"          humidity = list.main.humidity,",
				"          pressure = list.main.pressure,",
				"          temp = list.main.temp,",
				"          temp_max = list.main.temp_max,",
				"          temp_min = list.main.temp_min,",
				"          weather_description = list.weather.description,",
				"          weather_icon = list.weather.icon,",
				"          weather_id = list.weather.id,",
				"          weather_main = list.weather.main,",
				"          wind_deg = list.wind.deg,",
				"          wind_speed = list.wind.speed,",
				"          wind_gust = list.wind.gust",
				"     ),",
				"     skipDuplicateMapInputs: false,",
				"     skipDuplicateMapOutputs: false) ~> FlattenData",
				"FilterColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> WeatherSink"
			]
		}
	}
}