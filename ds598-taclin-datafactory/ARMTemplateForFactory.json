{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ds598-taclin-datafactory"
		},
		"DS598_Github_credential": {
			"type": "secureString",
			"metadata": "Secure string for 'credential' of 'DS598_Github'"
		},
		"ds598_datalake_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'ds598_datalake'"
		},
		"DS598_Github_properties_typeProperties_username": {
			"type": "string",
			"defaultValue": "tchLin"
		},
		"air_http_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://api.openweathermap.org"
		},
		"ds598_datalake_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ds598taclin.dfs.core.windows.net/"
		},
		"ds598_keyvault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://openweatherAPI-taclin.vault.azure.net/"
		},
		"openweatherAPI_airPollution_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "http://api.openweathermap.org"
		},
		"openweatherAPI_weather_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://history.openweathermap.org"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/air_ingestion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "key_vault_connector",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": {
								"value": "https://openweatherapi-taclin.vault.azure.net/secrets/openweatherAPI-key?api-version=7.0\n\n",
								"type": "Expression"
							},
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "ingest_air_data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "key_vault_connector",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET",
								"paginationRules": {
									"supportRFC5988": "true"
								}
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "air",
								"type": "DatasetReference",
								"parameters": {
									"appid": {
										"value": "@activity('key_vault_connector').output.value",
										"type": "Expression"
									},
									"lat": 42.36,
									"lon": -71.05,
									"dataType": "hour",
									"start": {
										"value": "@div(sub(ticks(addDays(utcNow(), -365)), ticks('1970-01-01T00:00:00Z')), 10000000)\n",
										"type": "Expression"
									},
									"end": {
										"value": "@div(sub(ticks(utcNow()), ticks('1970-01-01T00:00:00Z')), 10000000)\n",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "air_bronze_result",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"test": {
						"type": "Integer"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/air')]",
				"[concat(variables('factoryId'), '/datasets/air_bronze_result')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/air_ingestion_new')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "key_vault_connector",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://openweatherAPI-taclin.vault.azure.net/secrets/openweatherAPI-key?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "ingest_air_pol",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "key_vault_connector",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(1,52)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyAirData",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "air",
											"type": "DatasetReference",
											"parameters": {
												"appid": "@activity('key_vault_connector').output.value",
												"lat": 42.36,
												"lon": -71.05,
												"dataType": "hour",
												"start": "@div(sub(ticks(addDays(utcNow(), mul(-7, sub(int(item()), 1)))), ticks('1970-01-01T00:00:00Z')), 10000000)",
												"end": "@div(sub(ticks(addDays(utcNow(), add(mul(-7, sub(int(item()), 1)), 6))), ticks('1970-01-01T00:00:00Z')), 10000000)"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "air_pol_new",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"test": {
						"type": "Integer"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/air')]",
				"[concat(variables('factoryId'), '/datasets/air_pol_new')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/weather_ingestion')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "key_vault_connector",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"method": "GET",
							"headers": {},
							"url": "https://openweatherAPI-taclin.vault.azure.net/secrets/openweatherAPI-key?api-version=7.0",
							"authentication": {
								"type": "MSI",
								"resource": "https://vault.azure.net"
							}
						}
					},
					{
						"name": "ingest_weather",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "key_vault_connector",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@range(1,52)",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "CopyWeatherData",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET",
											"paginationRules": {
												"supportRFC5988": "true"
											}
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "weather",
											"type": "DatasetReference",
											"parameters": {
												"appid": {
													"value": "@activity('key_vault_connector').output.value",
													"type": "Expression"
												},
												"lat": 42.36,
												"lon": -71.05,
												"dataType": "hour",
												"start": {
													"value": "@div(sub(ticks(addDays(utcNow(), mul(-7, sub(int(item()), 1)))), ticks('1970-01-01T00:00:00Z')), 10000000)\n",
													"type": "Expression"
												},
												"end": {
													"value": "@div(sub(ticks(addDays(utcNow(), add(mul(-7, sub(int(item()), 1)), 6))), ticks('1970-01-01T00:00:00Z')), 10000000)\n",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "weather_new",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"test": {
						"type": "Integer"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/weather')]",
				"[concat(variables('factoryId'), '/datasets/weather_new')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/air')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "openweatherAPI_airPollution",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"appid": {
						"type": "string"
					},
					"lat": {
						"type": "float"
					},
					"lon": {
						"type": "float"
					},
					"dataType": {
						"type": "string"
					},
					"start": {
						"type": "int"
					},
					"end": {
						"type": "int"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "/data/2.5/air_pollution/history?lat=@{dataset().lat}&lon=@{dataset().lon}&type=@{dataset().dataType}&start=@{dataset().start}&end=@{dataset().end}&appid=@{dataset().appid}",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/openweatherAPI_airPollution')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/air_bronze_result')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ds598_datalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Bronze/air-pollution",
						"fileSystem": "ds598blob"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ds598_datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/air_pol_new')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ds598_datalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "bronze/air_pol_new/historical",
						"fileSystem": "ds598blob"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ds598_datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/weather')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "openweatherAPI_weather",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"appid": {
						"type": "string"
					},
					"lat": {
						"type": "float"
					},
					"lon": {
						"type": "float"
					},
					"dataType": {
						"type": "string"
					},
					"start": {
						"type": "int"
					},
					"end": {
						"type": "int"
					}
				},
				"annotations": [],
				"type": "RestResource",
				"typeProperties": {
					"relativeUrl": {
						"value": "/data/2.5/history/city?lat=@{dataset().lat}&lon=@{dataset().lon}&type=@{dataset().dataType}&start=@{dataset().start}&end=@{dataset().end}&appid=@{dataset().appid}",
						"type": "Expression"
					}
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/openweatherAPI_weather')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/weather_bronze_result')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ds598_datalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "Bronze/weather",
						"fileSystem": "ds598blob"
					}
				},
				"schema": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ds598_datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/weather_data')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ds598_datalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "silver",
						"fileSystem": "ds598blob"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ds598_datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/weather_new')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "ds598_datalake",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Json",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "bronze/weather_new/historical",
						"fileSystem": "ds598blob"
					}
				},
				"schema": {
					"type": "object",
					"properties": {
						"message": {
							"type": "string"
						},
						"cod": {
							"type": "string"
						},
						"city_id": {
							"type": "integer"
						},
						"calctime": {
							"type": "number"
						},
						"cnt": {
							"type": "integer"
						},
						"list": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"dt": {
										"type": "integer"
									},
									"main": {
										"type": "object",
										"properties": {
											"temp": {
												"type": "number"
											},
											"feels_like": {
												"type": "number"
											},
											"pressure": {
												"type": "integer"
											},
											"humidity": {
												"type": "integer"
											},
											"temp_min": {
												"type": "number"
											},
											"temp_max": {
												"type": "number"
											}
										}
									},
									"wind": {
										"type": "object",
										"properties": {
											"speed": {
												"type": "number"
											},
											"deg": {
												"type": "integer"
											},
											"gust": {
												"type": "number"
											}
										}
									},
									"clouds": {
										"type": "object",
										"properties": {
											"all": {
												"type": "integer"
											}
										}
									},
									"weather": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"id": {
													"type": "integer"
												},
												"main": {
													"type": "string"
												},
												"description": {
													"type": "string"
												},
												"icon": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/ds598_datalake')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS598_Github')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "GitHub",
				"typeProperties": {
					"username": "[parameters('DS598_Github_properties_typeProperties_username')]",
					"credential": {
						"type": "SecureString",
						"value": "[parameters('DS598_Github_credential')]"
					},
					"encryptedCredential": "ew0KICAiVmVyc2lvbiI6ICIyMDE3LTExLTMwIiwNCiAgIlByb3RlY3Rpb25Nb2RlIjogIktleSIsDQogICJTZWNyZXRDb250ZW50VHlwZSI6ICJQbGFpbnRleHQiLA0KICAiQ3JlZGVudGlhbElkIjogIkRBVEFGQUNUT1JZQDg5OENFQzE4LTdBOTEtNDFCRi05MDczLTk3MDdBRDhDOTA4QV9hNmMwMWZiNi02M2E0LTQ4MmUtOWY4Yy02MGY3NTJjOTk3NDEiDQp9"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/air_http')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "HttpServer",
				"typeProperties": {
					"url": "[parameters('air_http_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds598_datalake')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ds598_datalake_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('ds598_datalake_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds598_keyvault')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('ds598_keyvault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/openweatherAPI_airPollution')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('openweatherAPI_airPollution_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/openweatherAPI_weather')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "RestService",
				"typeProperties": {
					"url": "[parameters('openweatherAPI_weather_properties_typeProperties_url')]",
					"enableServerCertificateValidation": true,
					"authenticationType": "Anonymous"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Weather Dataflow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "weather_new",
								"type": "DatasetReference"
							},
							"name": "weatherData",
							"description": "Bronze weather data"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "weather_data",
								"type": "DatasetReference"
							},
							"name": "WeatherSink"
						}
					],
					"transformations": [
						{
							"name": "FlattenData"
						},
						{
							"name": "ConvertTime",
							"description": "Convert timestamp format"
						},
						{
							"name": "FilterInvalidRows"
						},
						{
							"name": "AddLocation",
							"description": "Add Boston as location"
						},
						{
							"name": "ConvertTimestamp",
							"description": "Conver timestamp to datetime"
						},
						{
							"name": "AddNewID",
							"description": "Create a unique ID by concatenating location and corrected_timestamp"
						},
						{
							"name": "TempDerive",
							"description": "Derive multiple temperature values"
						},
						{
							"name": "FixateCoordinates",
							"description": "Assign fixed longitude and latitude values"
						},
						{
							"name": "WeatherDataDerive",
							"description": "Extract and convert the weather ID from a string to an integer.\n\nExtract specific weather details from strings."
						},
						{
							"name": "FilterColumns",
							"description": "Rename the temperature columns and\ndrop unnecessary columns:"
						}
					],
					"scriptLines": [
						"source(output(",
						"          message as string,",
						"          cod as string,",
						"          city_id as integer,",
						"          calctime as double,",
						"          cnt as integer,",
						"          list as (dt as integer, main as (temp as double, feels_like as double, pressure as integer, humidity as integer, temp_min as double, temp_max as double), wind as (speed as double, deg as integer, gust as double), clouds as (all as integer), weather as (id as integer, main as string, description as string, icon as string)[])[]",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     documentForm: 'documentPerLine',",
						"     wildcardPaths:['*']) ~> weatherData",
						"weatherData foldDown(unroll(),",
						"     mapColumn(",
						"          city_id,",
						"          cod,",
						"          cnt,",
						"          message,",
						"          calctime,",
						"          clouds_all = list.clouds.all,",
						"          timestamp = list.dt,",
						"          feels_like = list.main.feels_like,",
						"          humidity = list.main.humidity,",
						"          pressure = list.main.pressure,",
						"          temp = list.main.temp,",
						"          temp_max = list.main.temp_max,",
						"          temp_min = list.main.temp_min,",
						"          weather_description = list.weather.description,",
						"          weather_icon = list.weather.icon,",
						"          weather_id = list.weather.id,",
						"          weather_main = list.weather.main,",
						"          wind_deg = list.wind.deg,",
						"          wind_gust = list.wind.gust,",
						"          wind_speed = list.wind.speed",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> FlattenData",
						"FlattenData derive(corrected_timestamp = iif(length(toString(timestamp)) > 10, toInteger(null()), timestamp)) ~> ConvertTime",
						"AddLocation filter(isNull(corrected_timestamp) || isNull(humidity) || isNull(temp)) ~> FilterInvalidRows",
						"ConvertTime derive(location = \"Boston\") ~> AddLocation",
						"FilterInvalidRows derive(date_time = toTimestamp(toLong(corrected_timestamp) * 1000)) ~> ConvertTimestamp",
						"ConvertTimestamp derive(id = concat(location, '_', toString(corrected_timestamp))) ~> AddNewID",
						"AddNewID derive(temp = round(temp - 273.15, 0),",
						"          temp_min_c = round(temp_min - 273.15, 0),",
						"          temp_max_c = round(temp_max - 273.15, 0),",
						"          feels_like_c = round(feels_like - 273.15, 0)) ~> TempDerive",
						"TempDerive derive(lon = -71.0589,",
						"          lat = 42.3601) ~> FixateCoordinates",
						"FixateCoordinates derive(weather_id_value = toInteger(weather_id),",
						"          weather_main_value = weather_main,",
						"          weather_description_value = weather_description,",
						"          weather_icon_value = weather_icon) ~> WeatherDataDerive",
						"WeatherDataDerive select(mapColumn(",
						"          clouds_all,",
						"          feels_like_k = feels_like,",
						"          humidity,",
						"          pressure,",
						"          temp_k = temp,",
						"          temp_max_k = temp_max,",
						"          temp_min_k = temp_min,",
						"          wind_deg,",
						"          wind_gust,",
						"          wind_speed,",
						"          corrected_timestamp,",
						"          location,",
						"          date_time,",
						"          id,",
						"          temp_min_c,",
						"          temp_max_c,",
						"          feels_like_c,",
						"          lon,",
						"          lat,",
						"          weather_id_value,",
						"          weather_main_value",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> FilterColumns",
						"FilterColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> WeatherSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/weather_new')]",
				"[concat(variables('factoryId'), '/datasets/weather_data')]"
			]
		}
	]
}